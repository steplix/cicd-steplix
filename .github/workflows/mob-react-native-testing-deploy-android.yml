name: Testing deployment

# Variables needed setted in staging environment
# AWS_BUCKET
# GRADLE_ENV_NAME
# ENV_VARIABLES
# ENV_FILE_NAME
# ANDROID_PACKAGE_NAME
# ANDROID_FIREBASE_TESTER_GROUP

on:
  workflow_call:
    inputs:
      COMMIT_MESSAGE:
        type: string
        description: 'Pass the head commit message {{ github.event.head_commit.message }}'
        required: true
      PR_BRANCH:
        type: string
        description: Branch to generate PR to finish the pipeline
        required: true
      ANDROID_KEYSTORE_NAME:
        type: string
        required: true
      NODE_VERSION:
        type: string
        default: '18'
        required: false
      DISABLE_CACHE:
        type: string
        default: 'false'
        required: false
      SLACK_CHANNEL:
        type: string
        required: false
      VERSION_CODE_OFFSET:
        type: number
        default: 0
        required: false
      GRADLE_VERSION:
        type: string
        default: release-candidate
        required: false
    secrets:
      SLACK_WEBHOOK_URL:
        required: true
      FIREBASE_TOKEN:
        required: true
      
      # ANDROID
      FIREBASE_ANDROID_APP_ID:
        required: true
      ANDROID_KEYSTORE_BASE64:
        required: true
      ANDROID_KEYSTORE_PASSWORD:
        required: true
      ANDROID_KEY_ALIAS:
        required: true
      ANDROID_KEY_PASSWORD:
        required: true

      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true

env:
  COMMIT_MESSAGE: '${{ inputs.COMMIT_MESSAGE }}'
  NEXT_BRANCH: '${{ inputs.PR_BRANCH }}'

  DISABLE_CACHE: '${{ inputs.DISABLE_CACHE }}'
  SLACK_CHANNEL: '${{ inputs.SLACK_CHANNEL }}'
  NODE_VERSION: '${{ inputs.NODE_VERSION }}'
  GRADLE_VERSION: '${{ inputs.GRADLE_VERSION }}'
  VERSION_CODE_OFFSET: '${{ inputs.VERSION_CODE_OFFSET || 0 }}'

  SLACK_WEBHOOK_URL: '${{ secrets.SLACK_WEBHOOK_URL }}'
  GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
  FIREBASE_TOKEN: '${{ secrets.FIREBASE_TOKEN }}'

  # Android
  FIREBASE_ANDROID_APP_ID: '${{ secrets.FIREBASE_ANDROID_APP_ID }}'
  ANDROID_KEYSTORE_NAME: '${{ inputs.ANDROID_KEYSTORE_NAME }}'
  ANDROID_KEYSTORE_BASE64: '${{ secrets.ANDROID_KEYSTORE_BASE64 }}'
  ANDROID_KEYSTORE_PASSWORD: '${{ secrets.ANDROID_KEYSTORE_PASSWORD }}'
  ANDROID_KEY_ALIAS: '${{ secrets.ANDROID_KEY_ALIAS }}'
  ANDROID_KEY_PASSWORD: '${{ secrets.ANDROID_KEY_PASSWORD }}'

  ANDROID_OUTPUT_FILEPATH: android/app/build/outputs/apk/${{ vars.GRADLE_ENV_NAME }}/release/app-${{ vars.GRADLE_ENV_NAME }}-release.apk

jobs:
  deploy:
    environment: testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Get Short commit SHA
        shell: bash
        run: echo "TAG=$(git rev-parse --short HEAD)" >> $GITHUB_ENV;

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        if: env.DISABLE_CACHE != 'true'
        id: cache
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: (steps.cache.outputs.cache-hit != 'true')
        run: npm ci --ignore-scripts

      - name: Calculate version code
        shell: bash
        env:
          RUN_NUMBER: ${{ github.run_number }}
        run: echo VERSION_CODE=$((${{ env.RUN_NUMBER }} + ${{ env.VERSION_CODE_OFFSET }})) >> $GITHUB_ENV

      - name: Bump version
        uses: chkfung/android-version-actions@v1.2.1
        with:
          gradlePath: android/app/build.gradle
          versionCode: ${{ env.VERSION_CODE }}
          versionName: ${{ env.TAG }}

      - name: Modify package.json based on bumped tag
        shell: bash
        run: |
          echo sed -i 's/\"version\":\s*\"[0-9]+\.[0-9]+\.[0-9]+\",\"version\": \"${{ env.TAG }}\"/g' package.json

      - name: Create .env file
        shell: bash
        run: echo "${{ vars.ENV_VARIABLES }}" > ${{ vars.ENV_FILE_NAME }}

      - name: Get project name
        uses: antifree/json-to-variables@v1.0.1
        with:
          filename: app.json
          prefix: app

      - name: Capitalize gradle environment
        id: CAPITALIZED_GRADLE_ENV
        uses: ASzc/change-string-case-action@v5
        with:
            string: ${{ vars.GRADLE_ENV_NAME }}

      - name: Decode Keystore
        id: keystore
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: ${{ env.ANDROID_KEYSTORE_NAME }}
          encodedString: ${{ env.ANDROID_KEYSTORE_BASE64 }}

      - name: Gradle cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            !~/.gradle/wrapper/dists/**/gradle*.zip
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Gradle Setup
        uses: gradle/gradle-build-action@v2.4.0
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}
          build-root-directory: android/
          gradle-executable: android/

      - name: Clean NDK
        shell: bash
        run: |
          rm -rf /usr/local/lib/android/sdk/ndk
          sed -i '/^ANDROID_NDK/d' ~/.bashrc
          sed -i '/^ANDROID_NDK_HOME/d' ~/.bashrc
          sed -i '/^ANDROID_NDK_LATEST_HOME/d' ~/.bashrc
          sed -i '/^ANDROID_NDK_ROOT/d' ~/.bashrc

      - name: Build Android Release
        run: cd android && ./gradlew assemble${{ env.GRADLE_ENV }}Release --no-daemon
        env:
          GRADLE_ENV: ${{ steps.CAPITALIZED_GRADLE_ENV.outputs.capitalized }}
          SIGNING_STORE_PATH: ${{ steps.keystore.outputs.filePath }}
          SIGNING_STORE_PASSWORD: ${{ env.ANDROID_KEYSTORE_PASSWORD }}
          SIGNING_KEY_ALIAS: ${{ env.ANDROID_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ env.ANDROID_KEY_PASSWORD }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload artifact S3
        shell: bash
        env:
          S3_URI: s3://${{ vars.AWS_BUCKET }}/${{ env.app_name }}/android/${{ vars.ANDROID_PACKAGE_NAME }}.apk
        run: aws s3 cp ${{ env.ANDROID_OUTPUT_FILEPATH }} ${{ env.S3_URI }}
      
      - name: Upload Android artifact to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1.5.0
        with:
          appId: ${{ env.FIREBASE_ANDROID_APP_ID }}
          token: ${{ env.FIREBASE_TOKEN }}
          groups: ${{ vars.ANDROID_FIREBASE_TESTER_GROUP }}
          file: ${{ env.ANDROID_OUTPUT_FILEPATH }}

  create-pr:
    runs-on: ubuntu-latest
    needs:
      - deploy
    steps:
      - uses: actions/checkout@v3

      - name: Create ${{ env.NEXT_BRANCH }} Pull Request
        id: pr
        uses: repo-sync/pull-request@v2
        with:
          destination_branch: ${{ env.NEXT_BRANCH }}
          pr_title: "Staging deployment: ${{ env.COMMIT_MESSAGE }}"
          pr_body: Automated PR
          github_token: ${{ env.GITHUB_TOKEN }}

      - name: Notify Slack
        uses: steplix/cicd-notify@1.0.0
        continue-on-error: true
        with:
          template: pr
          status: ${{ job.status }}
          channel: ${{ env.SLACK_CHANNEL }}
        env:
          PR_URL: ${{ steps.pr.outputs.pr_url }}
          PR_NUMBER: ${{ steps.pr.outputs.pr_number }}

  notify-failure:
    runs-on: ubuntu-latest
    needs:
      - deploy
      - create-pr
    if: failure()
    continue-on-error: true
    steps:
      - name: Slack Notify
        uses: steplix/cicd-notify@1.0.0
        with:
          template: push
          status: failure
          channel: ${{ env.SLACK_CHANNEL }}
