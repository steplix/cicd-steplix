name: Deployment to production
run-name: >
  Production deployment ${{ github.event.release.tag_name }}: ${{ github.event.release.name }}

on:
  workflow_call:
    inputs:
      SLACK_CHANNEL:
        type: string
        description: Slack channel to send notifications
        required: false
      AWS_BUCKET:
        type: string
        description: Bucket S3 to copy files for deploy
        required: true
      AWS_BUCKET_ARTIFACT:
        type: string
        description: Bucket S3 to download artifact to deploy
        required: true
      AWS_CLOUDFRONT_DISTRIBUTION_ID:
        type: string
        description: CloudFront Distribution ID
        required: true
    secrets:
      SLACK_WEBHOOK_URL:
        required: true
      AWS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true

jobs:

  ## DEPLOY

  download_unzip_deploy:
    runs-on: ubuntu-latest
    steps:
      #DOWNLOAD
      - uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: download zip from S3
        run: |
          aws s3 cp s3://${{ inputs.AWS_BUCKET_ARTIFACT }}/${{ github.event.release.tag_name }}.tar.gz .
      #UNZIP
      - name: mkdir
        run: mkdir output

      - name: un-zip
        id: unzip
        run: tar -xvzf ${{ github.event.release.tag_name }}.tar.gz -C output

      #UPLOAD
      - uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: copy files to S3
        run: |
          aws s3 sync output s3://${{ inputs.AWS_BUCKET }}
      - name: Cloudfront invalidation
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ inputs.AWS_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
  
  

  notify:
    if: ${{ always() }}
    needs: [ download_unzip_deploy ]
    runs-on: ubuntu-latest
    steps:
      - name: Notify Slack
        uses: steplix/cicd-notify@1.0.0
        with:
          template: 'push'
          status: ${{ needs.download_unzip_deploy.result}}
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          channel: ${{ inputs.SLACK_CHANNEL }}