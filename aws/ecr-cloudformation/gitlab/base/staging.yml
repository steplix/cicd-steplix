pre:tag:
  stage: pre-tag
  image: alpine
  allow_failure: false
  variables:
    BASE_VERSION: '0.0.0'
    MINOR_VERSION: '#minor'
    MAYOR_VERSION: '#mayor'
  before_script:
    - apk --cache-dir $APK_CACHE_DIR add git
  script:
    - git fetch --all --tags
    - TAG_ID=$(git rev-list --tags --max-count=1)
    - LAST_TAG=$(if [[ -z "$TAG_ID" ]]; then echo "${BASE_VERSION}"; else echo $(git describe --tags ${TAG_ID}); fi)
    - VERSION_TO_UPDATE=$([[ "$CI_COMMIT_MESSAGE" == *${MINOR_VERSION}* ]] && echo 1 || echo 0)
    - VERSION_TO_UPDATE=$([[ "$CI_COMMIT_MESSAGE" == *${MAYOR_VERSION}* ]] && echo 2 || echo 0)

    - echo "LAST_TAG = ${LAST_TAG}"

    - VERSION=$(echo "${LAST_TAG}" | awk -F. -v OFS=. '{$(NF - $VERSION_TO_UPDATE) += 1 ; print}')

    - echo "NEW_TAG = ${VERSION}"

    - echo "VERSION=${VERSION}" >> build.env

    - ECR_ENV=$([[ $SKIP_STAGING == 'true' ]] && echo 'production' || echo 'staging')
    - echo "ECR_ENV=${ECR_ENV}" >> build.env
  artifacts:
    expire_in: 30 mins
    reports:
      dotenv: build.env

docker:staging:
  stage: docker
  image: docker:rc
  allow_failure: false
  services:
    - docker:dind
  needs:
    - job: pre:tag
      artifacts: true
  before_script:
    - apk add --cache-dir $APK_CACHE_DIR python3 py-pip
    - pip install awscli
    - ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
    - DOCKER_URL=${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_ECR_REPOSITORY}
  script:
    - aws ecr get-login-password --region "${AWS_DEFAULT_REGION}" | docker login --username AWS --password-stdin ${DOCKER_URL}
    - LATEST=$(aws ecr describe-images --repository-name ${AWS_ECR_REPOSITORY} --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' --output text)

    - |
      sed -i 's/\"version\":\s*\"[0-9]\+\.[0-9]\+\.[0-9]\+\"/\"version\": \"${VERSION}\"/g' package.json

    - docker buildx build --push -t ${DOCKER_URL}:${VERSION} --cache-to=type=inline --cache-from=type=registry,ref=${DOCKER_URL}:${LATEST} .;
  environment: ${ECR_ENV}

tag:
  stage: tag
  image: alpine
  allow_failure: false
  needs:
    - job: pre:tag
      artifacts: true
    - docker:staging
  before_script:
    - apk --cache-dir $APK_CACHE_DIR add git
    - git config --global user.name "$GITLAB_USER_NAME"
    - git config --global user.email "$GITLAB_USER_EMAIL"
    - git remote set-url origin "https://${STEPLIX_GITLAB_ACCESS_USER}:${STEPLIX_GITLAB_ACCESS_TOKEN}@${CI_REPOSITORY_URL#*@}"
  script:
    - git tag ${VERSION}
    - git push origin --tags

deploy:staging:
  stage: deploy
  image: alpine
  allow_failure: false
  rules:
    - if: $SKIP_STAGING == "false"
  needs:
    - tag
  before_script:
    - apk add --cache-dir $APK_CACHE_DIR python3 py-pip git
    - pip install awscli
  script:
    - git fetch --all --tags
    - VERSION=$(git tag --contains ${CI_COMMIT_SHORT_SHA})

    - >
      aws cloudformation deploy
      --template-file ./cloudformation/cloudformation.yml
      --stack-name ${CI_PROJECT_NAME}-staging
      --no-fail-on-empty-changeset
      --region ${AWS_DEFAULT_REGION}
      --parameter-overrides Environment=staging ParameterSuffix=Staging EnvAwsECRImage=${AWS_ECR_REPOSITORY}:${VERSION} ${AWS_CLOUDFORMATION_PARAMS_OVERRIDE}
  environment: staging
